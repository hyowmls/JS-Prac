// 변수
var, let, const를 사용해 변수를 선언할 수 있다.

let과 const를 주로 사용하고 var는 거의 사용하지 않는다.
let은 값을 변경할 수 있지만, const는 값을 변경할 수 없다.
const로 선언한 변수를 <상수> 라고 부른다.
    - 대문자 상수 : 기억하기 힘든 값을 변수에 할당할 때 사용한다.  //ex. RGB값 등

-----------------------------------------------------------------------
// 자료형
숫자형, 문자형, Boolean형, null, undefined, 객체형, 심볼형

숫자형 - 정수, 부동 소수점 숫자 등의 숫자를 나타낼 때 사용한다
문자형 - 빈 문자열이나 글자들로 이뤄진 문자열을 나타낼 때 사용한다
Boolean형 - true, false를 반환할 때 사용한다
null - null 값만을 위한 독립적인 자료형이다. 알 수 없는 값을 나타낸다
undefined - undefined 값만을 위한 독립적인 자료형이다. 할당되지 않은 값을 나타낸다
객체형 - 복잡한 데이터 구조를 표현할 때 사용한다
심볼형 - 객체의 고유 식별자를 만들때 사용한다

-----------------------------------------------------------------------
// 기본 연산자
단항, 이항, 피연산자, 증감-감소 연산자

피연산자(operand) - 연산자가 연산을 수행하는 대상. 피연산자는 '인수(argument)' 라고 불리기도 한다
단항(unary) - 피연산자를 하나만 받는 연산자
이항(binary) - 피연산자를 두 개를 받는 연산자
증감(increment) 연산자 - 변수를 1 증가시킴  //ex. let count = 1
                                            count++;     // count = 2
감소(decrement) 연산자 - 변수를 1 감소시킴  //ex. let count = 2
                                            count--;     // count = 1
    - 증감, 감소 연산자는 변수에만 사용할 수 있다.
    - 증감, 감소 연산자는 변수의 앞, 뒤에 사용할 수 있고 값을 반환하는 방식이 달라진다.
    // ex.
            let count = 1;
            let a = ++count;
            console.log(a) // 2
            - 전위형은 count를 증가시키고 값을 반환한다.

            let count = 1;
            let a = count++;
            console.log(a) // 1
            - 후위형은 count를 증가시키긴 하지만 기존의 값을 반환한다.

-----------------------------------------------------------------------
// 비교 연산자
문자열 비교 알고리즘 (사전순서)
    1. 두 글자의 첫 글자를 비교한다.
    2. 첫 번째 문자열의 첫 글자가 다른 문자열의 첫 글자보다 크면(작으면), 첫 번째 문자열이 두 번째 문자열보다 크다고(작다고) 결론 내고 비교를 종료한다.
    3. 두 문자열의 첫 글자가 같으면 두 번째 글자를 같은 방식으로 비교한다.
    4. 글자 간 비교가 끝날 때까지 이 과정을 반복한다.
    5. 비교가 종료되었고 문자열의 길이도 같다면 두 문자열은 동일하다고 결론 낸다. 비교가 종료되었지만 두 문자열의 길이가 다르면 길이가 긴 문자열이 더 크다고 결론 낸다.

일치 연산자 (===)
    엄격한 동등(==)연산자로 자료형의 동등 여부까지 검사한다.

* undefined 는 비교가 불가능하다.

-----------------------------------------------------------------------
// 논리 연산자
||(or), &&(and), !(not)

조건문에서 같이 쓰이곤 한다.

-----------------------------------------------------------------------
// 함수
- 선언 및 호출
ex. function message() {
        alert('안녕하세요')
    }
    message()

// 지역변수
함수 내에서 선언한 변수인 지역 변수는 함수 안에서만 접근할 수 있음
ex. function message() {
        let message = '안녕하세요'
        alert(message)
    } 
message()
alert(message) -> message는 함수 내 지역 변수이기 때문에 에러가 발생함

// 외부함수
함수 내부에서 함수 외부의 변수인 외부 변수에 접근할 수 있음
ex. let userName = 'John'
    function message() {
        userName = 'Bob'
        let message = 'Hello' + userName
        alert(message)
    }
    alert(userName) -> 86Line 함수에 의해 Bob으로 바뀜

    - 외부 변수는 지역 변수가 없는 경우에만 사용할 수 있음
    ex. let userName = 'John'
        function message() {
            let userName = 'Bob'
            let message = 'Hello', userName
            alert(message)
        }
        message()
        alert(userName) -> 함수 내부에 userName이 선언되어 외부 변수에 접근하지 못해 값이 수정되지 않음

// 전역변수
위 예시의 userName처럼, 함수 외부에 선언된 변수는 전역 변수라고 부름.
전역 변수는 같은 이름을 가진 지역 변수에 의해 가려지지 않는다면 모든 함수에서 접근할 수 있음.

변수는 연관되는 함수 내에 선언하고, 전역 변수는 되도록 사용하지 않는 것이 좋음

// 매개변수 - 인수(parameter)
임의의 데이터를 함수 안에 전달할 수 있음.
ex. function message(from, text) {
        alert(from + ',' + text )
    }
    message('Ann', 'Hello') -> Ann, Hello

    - 매개변수는 함수 선언 방식 괄호 사이에 있는 변수 (선언 시 쓰이는 용어)
    - 인수는 함수를 호출할 때 매개변수에 전달되는 값 (호출 시 쓰이는 용어)

// 반환 값
함수를 호출했을 때 함수를 호출한 그곳에 특정 값을 반환할 수 있음.
ex. function sum( a, b) {
        return a + b    
    }
    let result = sum(1, 2)
    alert(result)

// 함수 이름 짓기
ex. showMessage()
    getAge()
    calcSum()
    createForm()
    checkPermission()

// 함수 표현식
- 선언예시
function sayHi(){
    alert('Hello')
}
- 표현식 예시
let sayHi = function () {
    alert('Hello')
}
    - 함수는 값이기 때문에 alert를 이용하여 함수 코드를 출력할 수 있음
    // 선언문과 표현식 차이
    선언문 - 함수는 주요 코드 흐름 중간에 독자적인 구문 형태로 존재
    ex. function sum(a,b){
            return a + b
        }
    표현식 - 함수는 표현식이나 구문 구성 내부에 생성됨
    ex. let sum = function(a, b){
            return a + b
        };

// 콜백함수
function ask(question, yes, no) {
    if (comfirm(question)) yes()
    else no()
}
function showOk() {
    alert('동의')
}
function showCancel() {
    alert('취소')
}
ask('동의하십니까?', showOk, showCancel)
    - 함수 ask의 인수, showOk, showCancel는 콜백 함수라고 불림
    함수를 함수의 인수로 전달하고, 필요하다면 인수로 전달한 그 함수를 나중에 호출(called back)하는 것

// 화살표 함수
함수 표현식을 간결한 문법으로 만들 수 있음
ex. let func = function(arg1, arg2) {
        return code;
    };

    let func = (arg1, arg2) => code
    - 인수가 하나밖에 없다면 인수를 감싸는 괄호를 생략할 수 있음
    ex. let func = arg1 => arg1 * 2
        alert(func(3)) // 6
    - 인수가 하나도 없을 땐 괄호를 비워놓으면 됨. 생략할 수는 없음
    ex. let sayHi = () => alert('Hi')
        sayHi()
    // 본문이 여러 줄인 화살표 함수
    => 왼쪽에 있는 인수를 이용해 => 오른쪽에 있는 표현식을 평가
    ex. let age = prompt('나이를 입력해주세요', 18);
        let welcom = (age < 18)?
            () => alert('안녕') :
            () => alert('안녕하세요')
        welcom()

    - 중괄호 없이 작성 (args) => expression 
        - 화살표 오른쪽에 표현식을 둠. 함수는 이 표현식을 평가하고 평가 결과를 반환
    - 중괄호와 함께 작성 (args) => {body}
        - 본문이 여러줄로 구성되었다면 중괄호를 사용해야함. 이 경우는 반드시 return 지시자를 사용해 반환 값을 명시해야함

// 나머지 매개변수 ...
여분의 매개변수는 값들을 담을 배열 이름에 ... 를 붙여주면 함수 선언부에 포함시킬 수 있음
ex. function sumAll(...args) {
        let sum = 0;
        for (let arg of args) sum += arg;
        return sum;
    }
    alert(sumAll(1))
    alert(sumAll(1,2))
    alert(sumAll(1,2,3))

처음 두 인수는 변수에, 나머지 인수들은 배열에 할당 할 수 있음
ex. function showName(firstName, lastName, ...titles) {
        alert(firstName, lastName) // HyoJin Kim
        alert(titles[0])           // Software Engineer
        alert(titles[1])           // Researcher
        alert(titles.length)       // 2
    }
    showName('HyoJin', 'Kim', 'Software Engineer', 'Researcher')
    
    - 나머지 매개변수는 항상 마지막에 있어야함
<정리>
...은 나머지 매개변수나 스프레드 문법으로 사용할 수 있음
- ...이 함수 매개변수 끝에 있으면 인수 목록의 나머지를 배열로 모아주는 나머지 매개변수
- ...이 함수 호출 시 사용되거나 기타 경우엔 배열 목록을 확장해주는 스프레드 문법

- 인수 개수에 제한이 없는 함수를 만들 때 나머지 매개변수를 사용
- 다수의 인수를 받는 함수에 배열을 전달할 때 스프레드 문법을 사용