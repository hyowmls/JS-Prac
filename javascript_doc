// 변수
var, let, const를 사용해 변수를 선언할 수 있다.

let과 const를 주로 사용하고 var는 거의 사용하지 않는다.
let은 값을 변경할 수 있지만, const는 값을 변경할 수 없다.
const로 선언한 변수를 <상수> 라고 부른다.
    - 대문자 상수 : 기억하기 힘든 값을 변수에 할당할 때 사용한다.  //ex. RGB값 등

-----------------------------------------------------------------------
// 자료형
숫자형, 문자형, Boolean형, null, undefined, 객체형, 심볼형

숫자형 - 정수, 부동 소수점 숫자 등의 숫자를 나타낼 때 사용한다
문자형 - 빈 문자열이나 글자들로 이뤄진 문자열을 나타낼 때 사용한다
Boolean형 - true, false를 반환할 때 사용한다
null - null 값만을 위한 독립적인 자료형이다. 알 수 없는 값을 나타낸다
undefined - undefined 값만을 위한 독립적인 자료형이다. 할당되지 않은 값을 나타낸다
객체형 - 복잡한 데이터 구조를 표현할 때 사용한다
심볼형 - 객체의 고유 식별자를 만들때 사용한다

-----------------------------------------------------------------------
// 기본 연산자
단항, 이항, 피연산자, 증감-감소 연산자

피연산자(operand) - 연산자가 연산을 수행하는 대상. 피연산자는 '인수(argument)' 라고 불리기도 한다
단항(unary) - 피연산자를 하나만 받는 연산자
이항(binary) - 피연산자를 두 개를 받는 연산자
증감(increment) 연산자 - 변수를 1 증가시킴  //ex. let count = 1
                                            count++;     // count = 2
감소(decrement) 연산자 - 변수를 1 감소시킴  //ex. let count = 2
                                            count--;     // count = 1
    - 증감, 감소 연산자는 변수에만 사용할 수 있다.
    - 증감, 감소 연산자는 변수의 앞, 뒤에 사용할 수 있고 값을 반환하는 방식이 달라진다.
    // ex.
            let count = 1;
            let a = ++count;
            console.log(a) // 2
            - 전위형은 count를 증가시키고 값을 반환한다.

            let count = 1;
            let a = count++;
            console.log(a) // 1
            - 후위형은 count를 증가시키긴 하지만 기존의 값을 반환한다.

-----------------------------------------------------------------------
// 비교 연산자
문자열 비교 알고리즘 (사전순서)
    1. 두 글자의 첫 글자를 비교한다.
    2. 첫 번째 문자열의 첫 글자가 다른 문자열의 첫 글자보다 크면(작으면), 첫 번째 문자열이 두 번째 문자열보다 크다고(작다고) 결론 내고 비교를 종료한다.
    3. 두 문자열의 첫 글자가 같으면 두 번째 글자를 같은 방식으로 비교한다.
    4. 글자 간 비교가 끝날 때까지 이 과정을 반복한다.
    5. 비교가 종료되었고 문자열의 길이도 같다면 두 문자열은 동일하다고 결론 낸다. 비교가 종료되었지만 두 문자열의 길이가 다르면 길이가 긴 문자열이 더 크다고 결론 낸다.

일치 연산자 (===)
    엄격한 동등(==)연산자로 자료형의 동등 여부까지 검사한다.

* undefined 는 비교가 불가능하다.

-----------------------------------------------------------------------
// 논리 연산자
||(or), &&(and), !(not)

조건문에서 같이 쓰이곤 한다.